<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Conteng Evolved]]></title>
  <link href="http://kctang.github.io/atom.xml" rel="self"/>
  <link href="http://kctang.github.io/"/>
  <updated>2015-05-09T22:54:43+08:00</updated>
  <id>http://kctang.github.io/</id>
  <author>
    <name><![CDATA[kctang]]></name>
    <email><![CDATA[kctang@big2.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Understanding Javascript Promise With Examples No More Callback Hell]]></title>
    <link href="http://kctang.github.io/blog/2015/05/09/understanding-javascript-promise-with-examples-no-more-callback-hell/"/>
    <updated>2015-05-09T00:00:00+08:00</updated>
    <id>http://kctang.github.io/blog/2015/05/09/understanding-javascript-promise-with-examples-no-more-callback-hell</id>
    <content type="html"><![CDATA[<p>These are some simple examples for JavaScript&rsquo;s <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> object. Use it to make your asynchronous operations code more managable and avoid <a href="http://callbackhell.com/">callback hells</a>.</p>

<!-- more -->


<h1>Basic Example</h1>

<p>In this example, we want to run something after an async task. Using the Promise syntax, the code seems to flow the async operation into a more synchronous style. At least that is how I see and value it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// run some async task that will take 1 second</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Async task runs&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">resolve</span><span class="p">();</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// this code runs</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Then run this code&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Chaining &ndash; Multiple Async Tasks in Sequence</h1>

<p>Sometimes it is useful to run multiple async task in sequence. Let&rsquo;s say we need to:</p>

<ol>
<li>Perform an AJAX call to get userId from the server.</li>
<li>With the userId, perform another AJAX call to retrieve products for the user.</li>
<li>Render the products on screen.</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 1. first async task</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">userId</span> <span class="o">=</span> <span class="s1">&#39;user-123&#39;</span><span class="p">;</span> <span class="c1">// assume this is an AJAX call&#39;s response</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Retrieved userId&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">resolve</span><span class="p">(</span><span class="nx">userId</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 2. second async task</span>
</span><span class='line'>    <span class="c1">// value is the resolved userID from the previous promise</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">products</span> <span class="o">=</span> <span class="s1">&#39;product-abc&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Retrieved products&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">resolve</span><span class="p">(</span><span class="nx">products</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 3. now we can render the products after two async tasks are done</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Rending product &#39;</span> <span class="o">+</span> <span class="nx">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Fork/Join</h1>

<p>Another common pattern is to have multiple tasks start as soon as they can. As soon as all the tasks complete, we execute some code. The difference between this and chaining above is all the promises run at the same time instead of running one by one in sequence.</p>

<p>A scenario for this could look like:</p>

<ol>
<li>Get current weather from server.</li>
<li>Get user profile from server.</li>
<li>Get latest news from a server.</li>
<li>Render data from the three tasks.</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">promiseToGetWeather</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;weather ok&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">weather</span> <span class="o">=</span> <span class="s1">&#39;cloudy&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">resolve</span><span class="p">(</span><span class="nx">weather</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">1500</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">promiseToGetProfile</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;profile ok&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">profile</span> <span class="o">=</span> <span class="s1">&#39;bob&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">resolve</span><span class="p">(</span><span class="nx">profile</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">500</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">promiseToGetNews</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;news ok&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">news</span> <span class="o">=</span> <span class="s1">&#39;meteor rising&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">resolve</span><span class="p">(</span><span class="nx">news</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span>
</span><span class='line'>    <span class="nx">promiseToGetWeather</span><span class="p">,</span> <span class="nx">promiseToGetProfile</span><span class="p">,</span> <span class="nx">promiseToGetNews</span>
</span><span class='line'><span class="p">]).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// value contains an array [&#39;cloudy&#39;, &#39;bob&#39;, &#39;meteor rising&#39;] as resolved by the promises</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Rendering data&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Details</h1>

<p>Hopefully these examples make it easier to get started with JavaScript promises. It is still useful to refer to <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> documentation on other features like error handling and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race">Promise.race()</a>.</p>

<p> Note that all the examples can executed on your browser&rsquo;s developer console &ndash; provided the browser supports Promise (Chrome >= 32; Firefox >= 29; IE >= 11; Opera >= 19; Safari >= 7.1).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Google Cloud DNS]]></title>
    <link href="http://kctang.github.io/blog/2014/06/25/using-google-cloud-dns/"/>
    <updated>2014-06-25T00:00:00+08:00</updated>
    <id>http://kctang.github.io/blog/2014/06/25/using-google-cloud-dns</id>
    <content type="html"><![CDATA[<p>Google Cloud DNS service provides an interesting <a href="https://developers.google.com/cloud-dns/pricing">pay as you use</a> pricing model. Announced in <a href="http://googlecloudplatform.blogspot.com/2014/03/announcing-google-cloud-dns.html">March 2014</a>, Google Cloud DNS can only be managed via Google&rsquo;s <a href="https://developers.google.com/cloud/sdk/gcloud/">gcloud</a> command line tool or <a href="https://developers.google.com/cloud-dns/api/v1beta1/">REST APIs</a>.</p>

<!-- more -->


<p>The steps described on the <a href="https://developers.google.com/cloud-dns/getting-started">Cloud DNS Getting Started</a> page are quite detailed to get started.</p>

<h3>Not a Domain Name Registrar</h3>

<p>Since Google Cloud DNS is not a domain name registrar, you will need to register a domain name and point the name server of the domain to the &ldquo;NS&rdquo; record of the managed zone created in Google Cloud DNS.</p>

<p>If you have multiple zones, take note that Google&rsquo;s name servers look similar but may not be the same for each zone.</p>

<pre><code>○ → gcloud dns managed-zone list
[
    {
        "creationTime": "2014-06-21T08:51:36.824Z",
        "description": "xxx.net.",
        "dnsName": "xxx.net.",
        "id": "9014807081031811107",
        "kind": "dns#managedZone",
        "name": "xxxnet",
        "nameServers": [
            "ns-cloud-e1.googledomains.com.",
            "ns-cloud-e2.googledomains.com.",
            "ns-cloud-e3.googledomains.com.",
            "ns-cloud-e4.googledomains.com."
        ]
    },
    {
        "creationTime": "2014-06-21T08:51:38.759Z",
        "description": "xxx.com.",
        "dnsName": "xxx.com.",
        "id": "6449170171006388811",
        "kind": "dns#managedZone",
        "name": "xxxcom",
        "nameServers": [
            "ns-cloud-b1.googledomains.com.",
            "ns-cloud-b2.googledomains.com.",
            "ns-cloud-b3.googledomains.com.",
            "ns-cloud-b4.googledomains.com."
        ]
    }
]
</code></pre>

<h3>Google Domains</h3>

<p>On a related note, Google just <a href="https://plus.google.com/+GoogleBusiness/posts/Dkhw41XJigw">announced</a> a <a href="https://domains.google.com/">domain registration service</a>! At the moment, it is in private beta and requires an invite. I am sure details about this service will be announced during Google I/O 2014.</p>

<h3>Common Commands</h3>

<p>These are the common commands used when managing DNS zones and records through this service.</p>

<pre><code># managing zone where each TLD should be in a separate zone
gcloud dns managed-zone list
gcloud dns managed-zone create --dns_name xxx.com. -- description xxx.com. xxxcom -q
gcloud dns managed-zone delete xxxcom

# managing records within a zone
gcloud dns records --zone=xxxcom list
gcloud dns records --zone=xxxcom edit
</code></pre>

<h3>DNS Records</h3>

<p>While there are many types of <a href="http://en.wikipedia.org/wiki/List_of_DNS_record_types">DNS records</a>, understanding Type A, CNAME and MX records will be sufficient for common web and mail hosting needs.</p>

<table>
<thead>
<tr>
<th> Type </th>
<th> Host Record </th>
<th> Points to </th>
<th> TTL </th>
<th> Description</th>
</tr>
</thead>
<tbody>
<tr>
<td> A </td>
<td> xxx.com. </td>
<td> 123.123.123.123 </td>
<td> 21600 </td>
<td> Maps xxx.com to 123.123.123.123.</td>
</tr>
<tr>
<td> CNAME </td>
<td> www.xxx.com. </td>
<td> xxx.com. </td>
<td> 21600 </td>
<td> Maps www.xxx.com to xxx.com.</td>
</tr>
<tr>
<td> MX    </td>
<td> xxx.com </td>
<td> aspmx.l.google.com. </td>
<td> 21600 </td>
<td> This record is used to map domain to message transfer agent (MTA) to send/receive emails.</td>
</tr>
</tbody>
</table>


<p>For example, to configure:</p>

<ul>
<li>xxx.com hosted at IP 123.123.123.</li>
<li>www.xxx.com pointing to the same IP address.</li>
<li>xxx.com to use <a href="http://www.google.com/enterprise/apps/business/">Google Apps</a> manage emails.</li>
<li>docs.xxx.com and mail.xxx.com to redirect to Google hosted services.</li>
</ul>


<p>Insert the following JSON data to the &ldquo;additions&rdquo; section when editing DNS records:</p>

<pre><code>{
    "kind": "dns#resourceRecordSet",
    "name": "xxx.com.",
    "rrdatas": [
        "123.123.123.123"
    ],
    "ttl": 21600,
    "type": "A"
},
{
    "kind": "dns#resourceRecordSet",
    "name": "www.xxx.com.",
    "rrdatas": [
        "xxx.com."
    ],
    "ttl": 21600,
    "type": "CNAME"
},
{
    "kind": "dns#resourceRecordSet",
    "name": "mail.xxx.com.",
    "rrdatas": [
        "ghs.googlehosted.com."
    ],
    "ttl": 21600,
    "type": "CNAME"
},
{
    "kind": "dns#resourceRecordSet",
    "name": "docs.xxx.com.",
    "rrdatas": [
        "ghs.googlehosted.com."
    ],
    "ttl": 21600,
    "type": "CNAME"
},
{
    "kind": "dns#resourceRecordSet",
    "name": "xxx.com.",
    "rrdatas": [
        "10 aspmx.l.google.com.",
        "20 alt1.aspmx.l.google.com.",
        "20 alt2.aspmx.l.google.com.",
        "30 alt3.aspmx.l.google.com.",
        "30 alt4.aspmx.l.google.com."
    ],
    "ttl": 21600,
    "type": "MX"
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remember-Me Authentication With Spring Security on Google App Engine]]></title>
    <link href="http://kctang.github.io/blog/2014/04/30/remember-me-authentication-with-spring-security-on-google-app-engine/"/>
    <updated>2014-04-30T00:00:00+08:00</updated>
    <id>http://kctang.github.io/blog/2014/04/30/remember-me-authentication-with-spring-security-on-google-app-engine</id>
    <content type="html"><![CDATA[<p>Spring Security has built-in <a href="http://docs.spring.io/spring-security/site/docs/3.0.x/reference/remember-me.html">&ldquo;remember-me&rdquo; authentication</a> capability to remember the identity of a user (principle) between session.</p>

<p>However, default implementations for &ldquo;persistent token&rdquo; only support in-memory (for testing) and JDBC. I wanted to implement this with App Engine using Objectify for persistence.</p>

<p>All it takes is to implement a custom <code>PersistentTokenRepository</code> and configure Spring Security to use it. This post assumes that Spring Security has been configured to work correctly with App Engine.</p>

<!-- more -->


<h2><code>RememberMeToken</code> Entity</h2>

<p>Define an Objectify entity class that will be used to store token data.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Entity</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RememberMeToken</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Id</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">series</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@Index</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">tokenValue</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Date</span> <span class="n">date</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// getters/setters</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Converting Between <code>PersistentRememberMeToken</code> And <code>RememberMeToken</code></h2>

<p>Since different objects are used during runtime and persistence, I use Spring&rsquo;s generic conversion service to help with type conversion.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RememberMeConverter</span> <span class="kd">implements</span> <span class="n">GenericConverter</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">ConvertiblePair</span><span class="o">&gt;</span> <span class="nf">getConvertibleTypes</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">of</span><span class="o">(</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">ConvertiblePair</span><span class="o">(</span><span class="n">RememberMeToken</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">PersistentRememberMeToken</span><span class="o">.</span><span class="na">class</span><span class="o">),</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">ConvertiblePair</span><span class="o">(</span><span class="n">PersistentRememberMeToken</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">RememberMeToken</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>        <span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">convert</span><span class="o">(</span><span class="n">Object</span> <span class="n">source</span><span class="o">,</span> <span class="n">TypeDescriptor</span> <span class="n">sourceType</span><span class="o">,</span> <span class="n">TypeDescriptor</span> <span class="n">targetType</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">sourceType</span><span class="o">.</span><span class="na">getType</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">RememberMeToken</span><span class="o">.</span><span class="na">class</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// RememberMeToken to PersistentRememberMeToken</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">RememberMeToken</span> <span class="n">from</span> <span class="o">=</span> <span class="o">(</span><span class="n">RememberMeToken</span><span class="o">)</span> <span class="n">source</span><span class="o">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">PersistentRememberMeToken</span><span class="o">(</span><span class="n">from</span><span class="o">.</span><span class="na">getUsername</span><span class="o">(),</span> <span class="n">from</span><span class="o">.</span><span class="na">getSeries</span><span class="o">(),</span> <span class="n">from</span><span class="o">.</span><span class="na">getTokenValue</span><span class="o">(),</span> <span class="n">from</span><span class="o">.</span><span class="na">getDate</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// PersistentRememberMeToken to RememberMeToken</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">PersistentRememberMeToken</span> <span class="n">from</span> <span class="o">=</span> <span class="o">(</span><span class="n">PersistentRememberMeToken</span><span class="o">)</span> <span class="n">source</span><span class="o">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">RememberMeToken</span><span class="o">(</span><span class="n">from</span><span class="o">.</span><span class="na">getUsername</span><span class="o">(),</span> <span class="n">from</span><span class="o">.</span><span class="na">getSeries</span><span class="o">(),</span> <span class="n">from</span><span class="o">.</span><span class="na">getTokenValue</span><span class="o">(),</span> <span class="n">from</span><span class="o">.</span><span class="na">getDate</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Create <code>ObjectifyPersistentTokenRepository</code> as a <code>PersistentTokenRepository</code></h2>

<p>This <code>PersistentTokenRepository</code> implementation uses a conversion service that has a <code>RememberMeConverter</code> registered and Objectify for persistence.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ObjectifyPersistentTokenRepository</span> <span class="kd">implements</span> <span class="n">PersistentTokenRepository</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ConversionService</span> <span class="n">conversionService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ObjectifyPersistentTokenRepository</span><span class="o">(</span><span class="n">ConversionService</span> <span class="n">conversionService</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">conversionService</span> <span class="o">=</span> <span class="n">conversionService</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">createNewToken</span><span class="o">(</span><span class="n">PersistentRememberMeToken</span> <span class="n">token</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">RememberMeToken</span> <span class="n">current</span> <span class="o">=</span> <span class="n">ofy</span><span class="o">().</span><span class="na">load</span><span class="o">().</span><span class="na">type</span><span class="o">(</span><span class="n">RememberMeToken</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">id</span><span class="o">(</span><span class="n">token</span><span class="o">.</span><span class="na">getSeries</span><span class="o">()).</span><span class="na">now</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">current</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">DataIntegrityViolationException</span><span class="o">(</span><span class="s">&quot;Series Id &#39;&quot;</span> <span class="o">+</span> <span class="n">token</span><span class="o">.</span><span class="na">getSeries</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;&#39; already exists!&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">RememberMeToken</span> <span class="n">ofyToken</span> <span class="o">=</span> <span class="n">conversionService</span><span class="o">.</span><span class="na">convert</span><span class="o">(</span><span class="n">token</span><span class="o">,</span> <span class="n">RememberMeToken</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">ofy</span><span class="o">().</span><span class="na">save</span><span class="o">().</span><span class="na">entity</span><span class="o">(</span><span class="n">ofyToken</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateToken</span><span class="o">(</span><span class="n">String</span> <span class="n">series</span><span class="o">,</span> <span class="n">String</span> <span class="n">tokenValue</span><span class="o">,</span> <span class="n">Date</span> <span class="n">lastUsed</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">PersistentRememberMeToken</span> <span class="n">token</span> <span class="o">=</span> <span class="n">getTokenForSeries</span><span class="o">(</span><span class="n">series</span><span class="o">);</span>
</span><span class='line'>        <span class="n">RememberMeToken</span> <span class="n">ofyToken</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RememberMeToken</span><span class="o">(</span><span class="n">token</span><span class="o">.</span><span class="na">getUsername</span><span class="o">(),</span> <span class="n">series</span><span class="o">,</span> <span class="n">tokenValue</span><span class="o">,</span> <span class="k">new</span> <span class="n">Date</span><span class="o">());</span>
</span><span class='line'>        <span class="n">ofy</span><span class="o">().</span><span class="na">save</span><span class="o">().</span><span class="na">entity</span><span class="o">(</span><span class="n">ofyToken</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">PersistentRememberMeToken</span> <span class="nf">getTokenForSeries</span><span class="o">(</span><span class="n">String</span> <span class="n">seriesId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">RememberMeToken</span> <span class="n">rememberMeToken</span> <span class="o">=</span> <span class="n">ofy</span><span class="o">().</span><span class="na">load</span><span class="o">().</span><span class="na">type</span><span class="o">(</span><span class="n">RememberMeToken</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">id</span><span class="o">(</span><span class="n">seriesId</span><span class="o">).</span><span class="na">now</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">rememberMeToken</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">conversionService</span><span class="o">.</span><span class="na">convert</span><span class="o">(</span><span class="n">rememberMeToken</span><span class="o">,</span> <span class="n">PersistentRememberMeToken</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">removeUserTokens</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ofy</span><span class="o">().</span><span class="na">delete</span><span class="o">().</span><span class="na">keys</span><span class="o">(</span>
</span><span class='line'>                <span class="n">ofy</span><span class="o">().</span><span class="na">load</span><span class="o">().</span><span class="na">type</span><span class="o">(</span><span class="n">RememberMeToken</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">filter</span><span class="o">(</span><span class="s">&quot;username&quot;</span><span class="o">,</span> <span class="n">username</span><span class="o">).</span><span class="na">keys</span><span class="o">().</span><span class="na">list</span><span class="o">()</span>
</span><span class='line'>        <span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Spring Security Configuration</h2>

<p>The final bit is to hook things up when configuring Spring Security. This can be done in the <code>configure(HttpSecurity http)</code> method if you are using Java configuration.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Configuration</span>
</span><span class='line'><span class="nd">@EnableWebMvcSecurity</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ConversionService</span> <span class="n">conversionService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">http</span>
</span><span class='line'>            <span class="c1">// common configuration</span>
</span><span class='line'>            <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">and</span><span class="o">().</span><span class="na">formLogin</span><span class="o">().</span><span class="na">loginPage</span><span class="o">(</span><span class="s">&quot;/login&quot;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">and</span><span class="o">().</span><span class="na">logout</span><span class="o">().</span><span class="na">logoutRequestMatcher</span><span class="o">(</span><span class="k">new</span> <span class="n">AntPathRequestMatcher</span><span class="o">(</span><span class="s">&quot;/logout&quot;</span><span class="o">)).</span><span class="na">logoutSuccessUrl</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// use the custom persistent token repository</span>
</span><span class='line'>            <span class="o">.</span><span class="na">and</span><span class="o">().</span><span class="na">rememberMe</span><span class="o">().</span><span class="na">tokenRepository</span><span class="o">(</span><span class="k">new</span> <span class="n">ObjectifyPersistentTokenRepository</span><span class="o">(</span><span class="n">conversionService</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>JSP Login Page</h2>

<p>Just in case you are wondering how the HTML form fields look:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;${loginUrl}&quot;</span> <span class="na">method=</span><span class="s">&quot;POST&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;c:if</span> <span class="na">test=</span><span class="s">&quot;${param.error != null}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;p&gt;</span>
</span><span class='line'>            Invalid username and password.
</span><span class='line'>        <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/c:if&gt;</span>
</span><span class='line'>    <span class="nt">&lt;c:if</span> <span class="na">test=</span><span class="s">&quot;${param.logout != null}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;p&gt;</span>
</span><span class='line'>            You have been logged out.
</span><span class='line'>        <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/c:if&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>
</span><span class='line'>        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;username&quot;</span><span class="nt">&gt;</span>Username<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">id=</span><span class="s">&quot;username&quot;</span> <span class="na">name=</span><span class="s">&quot;username&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>
</span><span class='line'>        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;password&quot;</span><span class="nt">&gt;</span>Password<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="na">id=</span><span class="s">&quot;password&quot;</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">name=</span><span class="s">&quot;remember-me&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span> Remember Me
</span><span class='line'>    <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">name=</span><span class="s">&quot;${_csrf.parameterName}&quot;</span> <span class="na">value=</span><span class="s">&quot;${_csrf.token}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">class=</span><span class="s">&quot;btn&quot;</span><span class="nt">&gt;</span>Log in<span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optional Dependency for Method Parameter With Spring @Configuration]]></title>
    <link href="http://kctang.github.io/blog/2014/04/26/optional-dependency-for-method-parameter-with-spring-at-configuration/"/>
    <updated>2014-04-26T07:04:09+08:00</updated>
    <id>http://kctang.github.io/blog/2014/04/26/optional-dependency-for-method-parameter-with-spring-at-configuration</id>
    <content type="html"><![CDATA[<p>I started with a Spring Java configuration that looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Configuration</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyConfig</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">MyService</span> <span class="nf">myService</span><span class="o">(</span><span class="n">Collection</span><span class="o">&lt;</span><span class="n">RelatedService</span><span class="o">&gt;</span> <span class="n">relatedServices</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">MyService</span><span class="o">(</span><span class="n">relatedServices</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically <code>Collection&lt;RelatedService&gt;</code> is telling Spring to look for all beans matching the type of <code>RelatedService</code> and put them in a <code>Collection</code> for me to use in <code>myService()</code>.</p>

<p>Then I wanted to make <code>relatedServices</code> an optional dependency. Ideally, I would like to be able to do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Configuration</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyConfig</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// invalid use of @Autowired</span>
</span><span class='line'>    <span class="n">MyService</span> <span class="nf">myService</span><span class="o">(</span><span class="nd">@Autowired</span><span class="o">(</span><span class="n">required</span><span class="o">=</span><span class="kc">false</span><span class="o">)</span> <span class="n">Collection</span><span class="o">&lt;</span><span class="n">RelatedService</span><span class="o">&gt;</span> <span class="n">relatedServices</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">MyService</span><span class="o">(</span><span class="n">relatedServices</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, <code>@Autowired</code> cannot annotate a parameter. This is what I end up doing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Configuration</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyConfig</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Autowired</span><span class="o">(</span><span class="n">required</span><span class="o">=</span><span class="kc">false</span><span class="o">)</span>
</span><span class='line'>    <span class="n">Collection</span><span class="o">&lt;</span><span class="n">RelatedService</span><span class="o">&gt;</span> <span class="n">relatedServices</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">MyService</span> <span class="nf">myService</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">MyService</span><span class="o">(</span><span class="n">relatedServices</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I would prefer to limit the visibility/scope of <code>relatedServices</code> within the method but it does not look possible.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developing a Bower Package While Using It]]></title>
    <link href="http://kctang.github.io/blog/2014/04/19/developing-a-bower-package-while-using-it/"/>
    <updated>2014-04-19T15:35:32+08:00</updated>
    <id>http://kctang.github.io/blog/2014/04/19/developing-a-bower-package-while-using-it</id>
    <content type="html"><![CDATA[<p>The <code>bower link</code> feature makes it easy to change &amp; test packages while using it as a dependency in other packages. If you are using Bower, you should be using this.</p>

<!-- more -->


<p>It helps resolve this common scenario:</p>

<ul>
<li>You developed <code>project-a</code> and <code>project-b</code>.</li>
<li><code>project-b</code> uses <code>project-a</code> via <code>bower install project-a</code>.</li>
<li>While working on <code>project-b</code>, you need to make a change in <code>project-a</code>.</li>
</ul>


<p>Solution: Just tell Bower that the <code>project-a</code> dependency used in <code>project-b</code> is located in a symlink location &ndash; where you actually checked out <code>project-a</code>.</p>

<p>To do this:</p>

<ul>
<li>In <code>project-a</code>, run <code>bower link</code> to create a global link for the project</li>
<li>In <code>project-b</code>, run <code>bower link project-a</code> to let Bower know that we should refer to <code>project-a</code> through the symlink.</li>
</ul>


<p>That&rsquo;s it. Simple &amp; effective.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Change User Within JUnit Test Case in Google AppEngine]]></title>
    <link href="http://kctang.github.io/blog/2014/02/05/change-user-within-junit-test-case-in-google-appengine/"/>
    <updated>2014-02-05T00:00:00+08:00</updated>
    <id>http://kctang.github.io/blog/2014/02/05/change-user-within-junit-test-case-in-google-appengine</id>
    <content type="html"><![CDATA[<p>Google AppEngine (Java) provides ability to mock <code>UserService</code> in JUnit test cases with the help of <code>LocalUserServiceTestConfig</code>. However, switching user within a test case is not so simple.</p>

<!-- more -->


<p>Switching user within a test case allows simulation of multi-user scenarios such as:</p>

<ol>
<li>Bob creates BobMessage.</li>
<li>Cat logs in and is able to see BobMessage.</li>
<li>Dan logs in and is not able to see BobMessage.</li>
</ol>


<h3>Solution</h3>

<p>Create a <code>loginAs(String, Closure)</code> method in Groovy to switch the injected <code>UserService</code> within Spring MVC controller object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Before</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">setUp</span><span class="o">()</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">LocalServiceTestHelper</span><span class="o">(</span><span class="k">new</span> <span class="n">LocalUserServiceTestConfig</span><span class="o">())</span>
</span><span class='line'>            <span class="o">.</span><span class="na">setEnvAttributes</span><span class="o">([</span>
</span><span class='line'>            <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">appengine</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">users</span><span class="o">.</span><span class="na">UserService</span><span class="o">.</span><span class="na">user_id_key</span><span class="err">&#39;</span><span class="o">:</span> <span class="err">&#39;</span><span class="n">bob</span><span class="o">-</span><span class="mi">101</span><span class="err">&#39;</span>
</span><span class='line'>    <span class="o">])</span>
</span><span class='line'>            <span class="o">.</span><span class="na">setEnvEmail</span><span class="o">(</span><span class="err">&#39;</span><span class="n">bob</span><span class="nd">@bob.com</span><span class="err">&#39;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">setEnvAuthDomain</span><span class="o">(</span><span class="err">&#39;</span><span class="n">bob</span><span class="o">.</span><span class="na">com</span><span class="err">&#39;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">setEnvIsLoggedIn</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">setUp</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">loginAs</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">Closure</span> <span class="n">closure</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">UserService</span> <span class="n">mockUserService</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">UserService</span><span class="o">)</span>
</span><span class='line'>    <span class="n">when</span><span class="o">(</span><span class="n">mockUserService</span><span class="o">.</span><span class="na">currentUser</span><span class="o">).</span><span class="na">thenReturn</span><span class="o">(</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="s">&quot;${username}@test&quot;</span><span class="o">,</span> <span class="err">&#39;</span><span class="n">test</span><span class="err">&#39;</span><span class="o">,</span> <span class="s">&quot;${username}-id&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UserService</span> <span class="n">backupUserService</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">userService</span>
</span><span class='line'>    <span class="n">controller</span><span class="o">.</span><span class="na">userService</span> <span class="o">=</span> <span class="n">mockUserService</span>
</span><span class='line'>    <span class="n">closure</span><span class="o">.</span><span class="na">call</span><span class="o">()</span>
</span><span class='line'>    <span class="n">controller</span><span class="o">.</span><span class="na">userService</span> <span class="o">=</span> <span class="n">backupUserService</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kt">void</span> <span class="err">&#39;</span><span class="n">multi</span> <span class="n">user</span> <span class="n">test</span> <span class="k">case</span><span class="err">&#39;</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// default user is bob@bob.com as configured in @Before</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="err">&#39;</span><span class="n">bob</span><span class="nd">@bob.com</span><span class="err">&#39;</span><span class="o">,</span> <span class="n">controller</span><span class="o">.</span><span class="na">userService</span><span class="o">.</span><span class="na">currentUser</span><span class="o">.</span><span class="na">email</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// login as &#39;ace&#39; and execute assertion in closure</span>
</span><span class='line'>    <span class="n">loginAs</span><span class="o">(</span><span class="err">&#39;</span><span class="n">ace</span><span class="err">&#39;</span><span class="o">,</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">assertEquals</span><span class="o">(</span><span class="err">&#39;</span><span class="n">ace</span><span class="nd">@test</span><span class="err">&#39;</span><span class="o">,</span> <span class="n">controller</span><span class="o">.</span><span class="na">userService</span><span class="o">.</span><span class="na">currentUser</span><span class="o">.</span><span class="na">email</span><span class="o">)</span>
</span><span class='line'>    <span class="o">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// login as &#39;cat&#39; and execute assertion in closure</span>
</span><span class='line'>    <span class="n">loginAs</span><span class="o">(</span><span class="err">&#39;</span><span class="n">cat</span><span class="err">&#39;</span><span class="o">,</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">assertEquals</span><span class="o">(</span><span class="err">&#39;</span><span class="n">cat</span><span class="nd">@test</span><span class="err">&#39;</span><span class="o">,</span> <span class="n">controller</span><span class="o">.</span><span class="na">userService</span><span class="o">.</span><span class="na">currentUser</span><span class="o">.</span><span class="na">email</span><span class="o">)</span>
</span><span class='line'>    <span class="o">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// post loginAs method, user reverts to value set in @Before</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="err">&#39;</span><span class="n">bob</span><span class="nd">@bob.com</span><span class="err">&#39;</span><span class="o">,</span> <span class="n">controller</span><span class="o">.</span><span class="na">userService</span><span class="o">.</span><span class="na">currentUser</span><span class="o">.</span><span class="na">email</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Requirements</h2>

<ul>
<li>Google App Engine (Java)</li>
<li>SpringMVC (@Controller with injected UserService)</li>
<li>Groovy &ndash; while this example was coded in Groovy, it is not really a requirement. You can always do similar stuff in Java.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy Support in Maven Projects]]></title>
    <link href="http://kctang.github.io/blog/2014/02/01/groovy-support-in-maven-projects/"/>
    <updated>2014-02-01T00:00:00+08:00</updated>
    <id>http://kctang.github.io/blog/2014/02/01/groovy-support-in-maven-projects</id>
    <content type="html"><![CDATA[<p>Groovy has a unique quality that other dynamic/scripting languages does not &ndash; you can write plain Java code in a Groovy class.</p>

<p>This attribute makes it an excellent choice for Java developers trying to pick up this dynamic language &ndash; start by writing Java and ease into Groovy&rsquo;s style as you practice.</p>

<!-- more -->


<p>To make the transition even smoother, you can mix Java classes with Groovy classes in Maven projects. All you need is to configure your project&rsquo;s <code>pom.xml</code> to &ldquo;recognize&rdquo; Groovy classes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span>
</span><span class='line'>         <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>         <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- reference - http://groovy.codehaus.org/Groovy-Eclipse+compiler+plugin+for+Maven --&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.codehaus.groovy<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>groovy-all<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>2.1.7<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;build&gt;</span>
</span><span class='line'>        <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>            <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>                <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;version&gt;</span>3.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>                <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;source&gt;</span>1.6<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;target&gt;</span>1.6<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;compilerId&gt;</span>groovy-eclipse-compiler<span class="nt">&lt;/compilerId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;groupId&gt;</span>org.codehaus.groovy<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;artifactId&gt;</span>groovy-eclipse-compiler<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;version&gt;</span>2.8.0-01<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;groupId&gt;</span>org.codehaus.groovy<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;artifactId&gt;</span>groovy-eclipse-batch<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;version&gt;</span>2.1.5-03<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/build&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it.</p>

<p>Some tips when doing this:</p>

<ul>
<li><p>If you are new to Groovy, it is good to know the <a href="http://groovy.codehaus.org/Differences+from+Java">differences from Java</a>.</p></li>
<li><p>Start with writing unit tests in Groovy where its syntactic sugar will make writing unit tests much more concise and enjoyable. This feature alone can justify enabling Groovy support in a Maven project.</p></li>
<li><p>Turn any existing Java class into a Groovy class by just renaming the file to .groovy. Note: This can be done via IntelliJ&rsquo;s refactor &ldquo;Rename File&hellip;&rdquo; action.</p></li>
<li><p>If you are not familiar with the dynamic nature of Groovy, just code in plain Java. No need to stress yourself out trying to be a pro-Groovy coder quickly.</p></li>
<li><p>IntelliJ&rsquo;s refactoring feature &ldquo;Convert to Java&rdquo; can be useful to convert Groovy class into Java class. While this does not always produce 100% usable/runnable Java code, it is still useful for learning purposes.</p></li>
<li><p>If you are using Spring Framework, know that all your beans/classes can be created as a Groovy class including things like <code>@Configuration</code>, <code>@Controllers</code>, <code>@Service</code> and other components &ndash; Groovy is a first class citizen in Spring based application.</p></li>
</ul>


<p>Using this in conjunction with IntelliJ&rsquo;s excellent Groovy support, it is hard to understand why this not the default configuration for all Maven based Java projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating GitHub Pages With Jekyll & LiveReload]]></title>
    <link href="http://kctang.github.io/jekyll/livereload/2014/01/25/github-pages-with-jekyll-and-livereload.html/"/>
    <updated>2014-01-25T00:00:00+08:00</updated>
    <id>http://kctang.github.io/jekyll/livereload/2014/01/25/github-pages-with-jekyll-and-livereload</id>
    <content type="html"><![CDATA[<p>Composing blog posts in Markdown is great but it would be even better if I can see how pages are rendered live. So, let&rsquo;s have that.</p>

<!-- more -->


<p>First thing, get a Jekyll blog set up. create a new blog structure in the current directory with:</p>

<pre><code>jekyll new .
</code></pre>

<p>See <a href="http://jekyllrb.com/docs/quickstart/">quick start guide</a> for details on viewing it from Jekyll&rsquo;s built-in server.</p>

<p>Next, enable live reload as you are editing content. Basically, it works as a Grunt project that uses <a href="https://github.com/gruntjs/grunt-contrib-watch">grunt-contrib-watch</a> plugin&rsquo;s support for livereload. It also bypasses Jekyll&rsquo;s built-in web server and use Grunt&rsquo;s web server for hosting &ndash; not a big deal but just so you know.</p>

<h2>Create/Update Configuration Files</h2>

<p>Create <code>Gruntfile.js</code>:</p>

<pre><code>module.exports = function (grunt) {
    grunt.initConfig({
        shell: {
            jekyllBuild: {
                command: 'jekyll build'
            }
        },
        connect: {
            server: {
                options: {
                    port: 8080,
                    base: '_site'
                }
            }
        },
        watch: {
          livereload: {
            files: [
                '_config.yml',
                'index.html',
                '_layouts/**',
                '_posts/**',
                '_includes/**',
            ],
            tasks: ['shell:jekyllBuild'],
            options: {
              livereload: true
            },
          },
        }
    });

    grunt.loadNpmTasks('grunt-contrib-connect');
    grunt.loadNpmTasks('grunt-contrib-watch');
    grunt.loadNpmTasks('grunt-shell');
    grunt.registerTask('default', ['shell', 'connect', 'watch'])
}
</code></pre>

<p>Create <code>package.json</code>:</p>

<pre><code>{
  "name": "My Jeykll Blog",
  "version": "0.0.1",
  "devDependencies": {
    "grunt": "~0.4.2",
    "grunt-contrib-connect": "~0.6.0",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-shell": "~0.6.4"
  }
}
</code></pre>

<p>Update <code>_config.yml</code> to exclude these non-Jekyll files from being processed by Jekyll:</p>

<pre><code>exclude: [node_modules, Gruntfile.js, package.json]
</code></pre>

<p>Update <code>.gitignore</code> to exclude node_modules from being committed.</p>

<h2>Pre-Requisites</h2>

<p>To make this work, there are some pre-requisites.</p>

<ul>
<li>Install <a href="https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei">LiveReload</a> plugin for Chrome browser.</li>
<li>Install npm. FWIW, <a href="https://gist.github.com/isaacs/579814">node-and-npm-in-30-seconds.sh</a> might be useful if you are not familiar with npm.</li>
</ul>


<h2>Running</h2>

<p>Type <code>npm install</code> to download the required Grunt dependencies for the first time.</p>

<p>After that, just type <code>grunt</code> to start a web server at port 8080 to host your blog with live reload enabled.</p>

<pre><code>→ grunt
Running "shell:jekyllBuild" (shell) task

Running "connect:server" (connect) task
Started connect web server on http://localhost:8080

Running "watch" task
Waiting...
</code></pre>

<p>Hope you find this helpful.</p>
]]></content>
  </entry>
  
</feed>
