<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript, | Conteng Evolved]]></title>
  <link href="http://kctang.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://kctang.github.io/"/>
  <updated>2015-05-09T23:04:19+08:00</updated>
  <id>http://kctang.github.io/</id>
  <author>
    <name><![CDATA[kctang]]></name>
    <email><![CDATA[kctang@big2.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Understanding JavaScript Promise With Examples - No More Callback Hell?]]></title>
    <link href="http://kctang.github.io/blog/2015/05/09/understanding-javascript-promise-with-examples-no-more-callback-hell/"/>
    <updated>2015-05-09T00:00:00+08:00</updated>
    <id>http://kctang.github.io/blog/2015/05/09/understanding-javascript-promise-with-examples-no-more-callback-hell</id>
    <content type="html"><![CDATA[<p>These are some simple examples for JavaScript&rsquo;s <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> object. Use it to make your asynchronous operations code more managable and avoid <a href="http://callbackhell.com/">callback hells</a>.</p>

<!-- more -->


<h3>Basic Example</h3>

<p>In this example, we want to run something after an async task. Using the Promise syntax, the code seems to flow the async operation into a more synchronous style. At least that is how I see and value it.</p>

<p>``` javascript</p>

<pre><code>new Promise(function(resolve) {

    // run some async task that will take 1 second
    setTimeout(function() {
        console.log('Async task runs');
        resolve();
    }, 1000);

}).then(function() {

    // this code runs
    console.log('Then run this code');

});
</code></pre>

<p>```</p>

<h3>Chaining &ndash; Multiple Async Tasks in Sequence</h3>

<p>Sometimes it is useful to run multiple async task in sequence. Let&rsquo;s say we need to:</p>

<ol>
<li>Perform an AJAX call to get userId from the server.</li>
<li>With the userId, perform another AJAX call to retrieve products for the user.</li>
<li>Render the products on screen.</li>
</ol>


<p>``` javascript</p>

<pre><code>new Promise(function(resolve) {

    // 1. first async task
    setTimeout(function() {
        var userId = 'user-123'; // assume this is an AJAX call's response
        console.log('Retrieved userId');
        resolve(userId);
    }, 1000);

}).then(function(value) {

    // 2. second async task
    // value is the resolved userID from the previous promise
    return new Promise(function(resolve) {
        setTimeout(function() {
            var products = 'product-abc';
            console.log('Retrieved products');
            resolve(products);
        }, 1000);
    });

}).then(function(value) {

    // 3. now we can render the products after two async tasks are done
    console.log('Rending product ' + value);

});
</code></pre>

<p>```</p>

<h3>Fork/Join</h3>

<p>Another common pattern is to have multiple tasks start as soon as they can. As soon as all the tasks complete, we execute some code. The difference between this and chaining above is all the promises run at the same time instead of running one by one in sequence.</p>

<p>A scenario for this could look like:</p>

<ol>
<li>Get current weather from server.</li>
<li>Get user profile from server.</li>
<li>Get latest news from a server.</li>
<li>Render data from the three tasks.</li>
</ol>


<p>``` javascript</p>

<pre><code>var promiseToGetWeather = new Promise(function(resolve) {
    setTimeout(function() {
        console.log('weather ok');
        var weather = 'cloudy';
        resolve(weather);
    }, 1500);
});

var promiseToGetProfile = new Promise(function(resolve) {
    setTimeout(function() {
        console.log('profile ok');
        var profile = 'bob';
        resolve(profile);
    }, 500);
});

var promiseToGetNews = new Promise(function(resolve) {
    setTimeout(function() {
        console.log('news ok');
        var news = 'meteor rising';
        resolve(news);
    }, 1000);
});

Promise.all([
    promiseToGetWeather, promiseToGetProfile, promiseToGetNews
]).then(function(value) {
    // value contains an array ['cloudy', 'bob', 'meteor rising'] as resolved by the promises
    console.log('Rendering data');
    console.log(value);
});
</code></pre>

<p>```</p>

<h3>Details</h3>

<p>Hopefully these examples make it easier to get started with JavaScript promises. It is still useful to refer to <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> documentation on other features like error handling and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race">Promise.race()</a>.</p>

<p> Note that all the examples can executed on your browser&rsquo;s developer console &ndash; provided the browser supports Promise (Chrome >= 32; Firefox >= 29; IE >= 11; Opera >= 19; Safari >= 7.1).</p>
]]></content>
  </entry>
  
</feed>
