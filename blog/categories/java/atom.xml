<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Conteng Evolved]]></title>
  <link href="http://kctang.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://kctang.github.io/"/>
  <updated>2015-05-09T23:01:15+08:00</updated>
  <id>http://kctang.github.io/</id>
  <author>
    <name><![CDATA[kctang]]></name>
    <email><![CDATA[kctang@big2.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Remember-Me Authentication With Spring Security on Google App Engine]]></title>
    <link href="http://kctang.github.io/blog/2014/04/30/remember-me-authentication-with-spring-security-on-google-app-engine/"/>
    <updated>2014-04-30T00:00:00+08:00</updated>
    <id>http://kctang.github.io/blog/2014/04/30/remember-me-authentication-with-spring-security-on-google-app-engine</id>
    <content type="html"><![CDATA[<p>Spring Security has built-in <a href="http://docs.spring.io/spring-security/site/docs/3.0.x/reference/remember-me.html">&ldquo;remember-me&rdquo; authentication</a> capability to remember the identity of a user (principle) between session.</p>

<p>However, default implementations for &ldquo;persistent token&rdquo; only support in-memory (for testing) and JDBC. I wanted to implement this with App Engine using Objectify for persistence.</p>

<p>All it takes is to implement a custom <code>PersistentTokenRepository</code> and configure Spring Security to use it. This post assumes that Spring Security has been configured to work correctly with App Engine.</p>

<!-- more -->


<h2><code>RememberMeToken</code> Entity</h2>

<p>Define an Objectify entity class that will be used to store token data.</p>

<p>``` java</p>

<pre><code>@Entity
public class RememberMeToken {
    @Id
    private String series;
    @Index
    private String username;
    private String tokenValue;
    private Date date;

    // getters/setters
}
</code></pre>

<p>```</p>

<h2>Converting Between <code>PersistentRememberMeToken</code> And <code>RememberMeToken</code></h2>

<p>Since different objects are used during runtime and persistence, I use Spring&rsquo;s generic conversion service to help with type conversion.</p>

<p>``` java
public class RememberMeConverter implements GenericConverter {</p>

<pre><code>@Override
public Set&lt;ConvertiblePair&gt; getConvertibleTypes() {
    return of(
            new ConvertiblePair(RememberMeToken.class, PersistentRememberMeToken.class),
            new ConvertiblePair(PersistentRememberMeToken.class, RememberMeToken.class)
    );
}

@Override
public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {
    if (sourceType.getType().equals(RememberMeToken.class)) {
        // RememberMeToken to PersistentRememberMeToken

        RememberMeToken from = (RememberMeToken) source;
        return new PersistentRememberMeToken(from.getUsername(), from.getSeries(), from.getTokenValue(), from.getDate());

    } else {
        // PersistentRememberMeToken to RememberMeToken

        PersistentRememberMeToken from = (PersistentRememberMeToken) source;
        return new RememberMeToken(from.getUsername(), from.getSeries(), from.getTokenValue(), from.getDate());
    }
}
</code></pre>

<p>}
```</p>

<h2>Create <code>ObjectifyPersistentTokenRepository</code> as a <code>PersistentTokenRepository</code></h2>

<p>This <code>PersistentTokenRepository</code> implementation uses a conversion service that has a <code>RememberMeConverter</code> registered and Objectify for persistence.</p>

<p>``` java
public class ObjectifyPersistentTokenRepository implements PersistentTokenRepository {</p>

<pre><code>private ConversionService conversionService;

public ObjectifyPersistentTokenRepository(ConversionService conversionService) {
    this.conversionService = conversionService;
}

@Override
public void createNewToken(PersistentRememberMeToken token) {
    RememberMeToken current = ofy().load().type(RememberMeToken.class).id(token.getSeries()).now();
    if (current != null) {
        throw new DataIntegrityViolationException("Series Id '" + token.getSeries() + "' already exists!");
    }

    RememberMeToken ofyToken = conversionService.convert(token, RememberMeToken.class);
    ofy().save().entity(ofyToken);
}

@Override
public void updateToken(String series, String tokenValue, Date lastUsed) {
    PersistentRememberMeToken token = getTokenForSeries(series);
    RememberMeToken ofyToken = new RememberMeToken(token.getUsername(), series, tokenValue, new Date());
    ofy().save().entity(ofyToken);
}

@Override
public PersistentRememberMeToken getTokenForSeries(String seriesId) {
    RememberMeToken rememberMeToken = ofy().load().type(RememberMeToken.class).id(seriesId).now();
    if (rememberMeToken != null) {
        return conversionService.convert(rememberMeToken, PersistentRememberMeToken.class);
    } else {
        return null;
    }
}

@Override
public void removeUserTokens(String username) {
    ofy().delete().keys(
            ofy().load().type(RememberMeToken.class).filter("username", username).keys().list()
    );
}
</code></pre>

<p>}
```</p>

<h2>Spring Security Configuration</h2>

<p>The final bit is to hook things up when configuring Spring Security. This can be done in the <code>configure(HttpSecurity http)</code> method if you are using Java configuration.</p>

<p>``` java
@Configuration
@EnableWebMvcSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {</p>

<pre><code>@Autowired
private ConversionService conversionService;

@Override
protected void configure(HttpSecurity http) throws Exception {
    http
        // common configuration
        .authorizeRequests()
        .antMatchers("/").permitAll()
        .anyRequest().authenticated()
        .and().formLogin().loginPage("/login").permitAll()
        .and().logout().logoutRequestMatcher(new AntPathRequestMatcher("/logout")).logoutSuccessUrl("/").permitAll()

        // use the custom persistent token repository
        .and().rememberMe().tokenRepository(new ObjectifyPersistentTokenRepository(conversionService));

}
</code></pre>

<p>}</p>

<p>```</p>

<h2>JSP Login Page</h2>

<p>Just in case you are wondering how the HTML form fields look:</p>

<p>``` html</p>

<pre><code>&lt;form action="${loginUrl}" method="POST"&gt;
    &lt;c:if test="${param.error != null}"&gt;
        &lt;p&gt;
            Invalid username and password.
        &lt;/p&gt;
    &lt;/c:if&gt;
    &lt;c:if test="${param.logout != null}"&gt;
        &lt;p&gt;
            You have been logged out.
        &lt;/p&gt;
    &lt;/c:if&gt;
    &lt;p&gt;
        &lt;label for="username"&gt;Username&lt;/label&gt;
        &lt;input type="text" id="username" name="username"/&gt;
    &lt;/p&gt;

    &lt;p&gt;
        &lt;label for="password"&gt;Password&lt;/label&gt;
        &lt;input type="password" id="password" name="password"/&gt;
    &lt;/p&gt;
    &lt;p&gt;
        &lt;input type="checkbox" name="remember-me" value="true"&gt; Remember Me
    &lt;/p&gt;
    &lt;input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}"/&gt;
    &lt;button type="submit" class="btn"&gt;Log in&lt;/button&gt;
&lt;/form&gt;
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optional Dependency for Method Parameter With Spring @Configuration]]></title>
    <link href="http://kctang.github.io/blog/2014/04/26/optional-dependency-for-method-parameter-with-spring-at-configuration/"/>
    <updated>2014-04-26T07:04:09+08:00</updated>
    <id>http://kctang.github.io/blog/2014/04/26/optional-dependency-for-method-parameter-with-spring-at-configuration</id>
    <content type="html"><![CDATA[<p>I started with a Spring Java configuration that looks like this:</p>

<p>``` java</p>

<pre><code>@Configuration
public class MyConfig {
    MyService myService(Collection&lt;RelatedService&gt; relatedServices) {
        return new MyService(relatedServices);
    }
}
</code></pre>

<p>```</p>

<p>Basically <code>Collection&lt;RelatedService&gt;</code> is telling Spring to look for all beans matching the type of <code>RelatedService</code> and put them in a <code>Collection</code> for me to use in <code>myService()</code>.</p>

<p>Then I wanted to make <code>relatedServices</code> an optional dependency. Ideally, I would like to be able to do something like this:</p>

<p>``` java</p>

<pre><code>@Configuration
public class MyConfig {
    // invalid use of @Autowired
    MyService myService(@Autowired(required=false) Collection&lt;RelatedService&gt; relatedServices) {
        return new MyService(relatedServices);
    }
}
</code></pre>

<p>```</p>

<p>However, <code>@Autowired</code> cannot annotate a parameter. This is what I end up doing.</p>

<p>``` java</p>

<pre><code>@Configuration
public class MyConfig {
    @Autowired(required=false)
    Collection&lt;RelatedService&gt; relatedServices

    MyService myService() {
        return new MyService(relatedServices);
    }
}
</code></pre>

<p>```</p>

<p>I would prefer to limit the visibility/scope of <code>relatedServices</code> within the method but it does not look possible.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Change User Within JUnit Test Case in Google AppEngine]]></title>
    <link href="http://kctang.github.io/blog/2014/02/05/change-user-within-junit-test-case-in-google-appengine/"/>
    <updated>2014-02-05T00:00:00+08:00</updated>
    <id>http://kctang.github.io/blog/2014/02/05/change-user-within-junit-test-case-in-google-appengine</id>
    <content type="html"><![CDATA[<p>Google AppEngine (Java) provides ability to mock <code>UserService</code> in JUnit test cases with the help of <code>LocalUserServiceTestConfig</code>. However, switching user within a test case is not so simple.</p>

<!-- more -->


<p>Switching user within a test case allows simulation of multi-user scenarios such as:</p>

<ol>
<li>Bob creates BobMessage.</li>
<li>Cat logs in and is able to see BobMessage.</li>
<li>Dan logs in and is not able to see BobMessage.</li>
</ol>


<h3>Solution</h3>

<p>Create a <code>loginAs(String, Closure)</code> method in Groovy to switch the injected <code>UserService</code> within Spring MVC controller object.</p>

<p>``` java
@Before
public void setUp() {</p>

<pre><code>super.setUp()
new LocalServiceTestHelper(new LocalUserServiceTestConfig())
        .setEnvAttributes([
        'com.google.appengine.api.users.UserService.user_id_key': 'bob-101'
])
        .setEnvEmail('bob@bob.com')
        .setEnvAuthDomain('bob.com')
        .setEnvIsLoggedIn(true)
        .setUp()
</code></pre>

<p>}</p>

<p>void loginAs(String username, Closure closure) {</p>

<pre><code>UserService mockUserService = mock(UserService)
when(mockUserService.currentUser).thenReturn(
        new User("${username}@test", 'test', "${username}-id")
)

UserService backupUserService = controller.userService
controller.userService = mockUserService
closure.call()
controller.userService = backupUserService
</code></pre>

<p>}</p>

<p>@Test
void &lsquo;multi user test case&rsquo;() {</p>

<pre><code>// default user is bob@bob.com as configured in @Before
assertEquals('bob@bob.com', controller.userService.currentUser.email)

// login as 'ace' and execute assertion in closure
loginAs('ace', {
    assertEquals('ace@test', controller.userService.currentUser.email)
})

// login as 'cat' and execute assertion in closure
loginAs('cat', {
    assertEquals('cat@test', controller.userService.currentUser.email)
})

// post loginAs method, user reverts to value set in @Before
assertEquals('bob@bob.com', controller.userService.currentUser.email)
</code></pre>

<p>}
```</p>

<h2>Requirements</h2>

<ul>
<li>Google App Engine (Java)</li>
<li>SpringMVC (@Controller with injected UserService)</li>
<li>Groovy &ndash; while this example was coded in Groovy, it is not really a requirement. You can always do similar stuff in Java.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy Support in Maven Projects]]></title>
    <link href="http://kctang.github.io/blog/2014/02/01/groovy-support-in-maven-projects/"/>
    <updated>2014-02-01T00:00:00+08:00</updated>
    <id>http://kctang.github.io/blog/2014/02/01/groovy-support-in-maven-projects</id>
    <content type="html"><![CDATA[<p>Groovy has a unique quality that other dynamic/scripting languages does not &ndash; you can write plain Java code in a Groovy class.</p>

<p>This attribute makes it an excellent choice for Java developers trying to pick up this dynamic language &ndash; start by writing Java and ease into Groovy&rsquo;s style as you practice.</p>

<!-- more -->


<p>To make the transition even smoother, you can mix Java classes with Groovy classes in Maven projects. All you need is to configure your project&rsquo;s <code>pom.xml</code> to &ldquo;recognize&rdquo; Groovy classes.</p>

<p>``` xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
&lt;project xmlns=&ldquo;<a href="http://maven.apache.org/POM/4.0.0">http://maven.apache.org/POM/4.0.0</a>&rdquo;</p>

<pre><code>     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

&lt;!-- reference - http://groovy.codehaus.org/Groovy-Eclipse+compiler+plugin+for+Maven --&gt;

&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.codehaus.groovy&lt;/groupId&gt;
        &lt;artifactId&gt;groovy-all&lt;/artifactId&gt;
        &lt;version&gt;2.1.7&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;

&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
            &lt;version&gt;3.1&lt;/version&gt;
            &lt;configuration&gt;
                &lt;source&gt;1.6&lt;/source&gt;
                &lt;target&gt;1.6&lt;/target&gt;
                &lt;compilerId&gt;groovy-eclipse-compiler&lt;/compilerId&gt;
            &lt;/configuration&gt;
            &lt;dependencies&gt;
                &lt;dependency&gt;
                    &lt;groupId&gt;org.codehaus.groovy&lt;/groupId&gt;
                    &lt;artifactId&gt;groovy-eclipse-compiler&lt;/artifactId&gt;
                    &lt;version&gt;2.8.0-01&lt;/version&gt;
                &lt;/dependency&gt;
                &lt;dependency&gt;
                    &lt;groupId&gt;org.codehaus.groovy&lt;/groupId&gt;
                    &lt;artifactId&gt;groovy-eclipse-batch&lt;/artifactId&gt;
                    &lt;version&gt;2.1.5-03&lt;/version&gt;
                &lt;/dependency&gt;
            &lt;/dependencies&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>

<p></project>
```</p>

<p>That&rsquo;s it.</p>

<p>Some tips when doing this:</p>

<ul>
<li><p>If you are new to Groovy, it is good to know the <a href="http://groovy.codehaus.org/Differences+from+Java">differences from Java</a>.</p></li>
<li><p>Start with writing unit tests in Groovy where its syntactic sugar will make writing unit tests much more concise and enjoyable. This feature alone can justify enabling Groovy support in a Maven project.</p></li>
<li><p>Turn any existing Java class into a Groovy class by just renaming the file to .groovy. Note: This can be done via IntelliJ&rsquo;s refactor &ldquo;Rename File&hellip;&rdquo; action.</p></li>
<li><p>If you are not familiar with the dynamic nature of Groovy, just code in plain Java. No need to stress yourself out trying to be a pro-Groovy coder quickly.</p></li>
<li><p>IntelliJ&rsquo;s refactoring feature &ldquo;Convert to Java&rdquo; can be useful to convert Groovy class into Java class. While this does not always produce 100% usable/runnable Java code, it is still useful for learning purposes.</p></li>
<li><p>If you are using Spring Framework, know that all your beans/classes can be created as a Groovy class including things like <code>@Configuration</code>, <code>@Controllers</code>, <code>@Service</code> and other components &ndash; Groovy is a first class citizen in Spring based application.</p></li>
</ul>


<p>Using this in conjunction with IntelliJ&rsquo;s excellent Groovy support, it is hard to understand why this not the default configuration for all Maven based Java projects.</p>
]]></content>
  </entry>
  
</feed>
