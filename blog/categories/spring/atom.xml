<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Spring | Conteng Evolved]]></title>
  <link href="http://kctang.github.io/blog/categories/spring/atom.xml" rel="self"/>
  <link href="http://kctang.github.io/"/>
  <updated>2015-05-09T22:54:43+08:00</updated>
  <id>http://kctang.github.io/</id>
  <author>
    <name><![CDATA[kctang]]></name>
    <email><![CDATA[kctang@big2.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Remember-Me Authentication With Spring Security on Google App Engine]]></title>
    <link href="http://kctang.github.io/blog/2014/04/30/remember-me-authentication-with-spring-security-on-google-app-engine/"/>
    <updated>2014-04-30T00:00:00+08:00</updated>
    <id>http://kctang.github.io/blog/2014/04/30/remember-me-authentication-with-spring-security-on-google-app-engine</id>
    <content type="html"><![CDATA[<p>Spring Security has built-in <a href="http://docs.spring.io/spring-security/site/docs/3.0.x/reference/remember-me.html">&ldquo;remember-me&rdquo; authentication</a> capability to remember the identity of a user (principle) between session.</p>

<p>However, default implementations for &ldquo;persistent token&rdquo; only support in-memory (for testing) and JDBC. I wanted to implement this with App Engine using Objectify for persistence.</p>

<p>All it takes is to implement a custom <code>PersistentTokenRepository</code> and configure Spring Security to use it. This post assumes that Spring Security has been configured to work correctly with App Engine.</p>

<!-- more -->


<h2><code>RememberMeToken</code> Entity</h2>

<p>Define an Objectify entity class that will be used to store token data.</p>

<p>``` java</p>

<pre><code>@Entity
public class RememberMeToken {
    @Id
    private String series;
    @Index
    private String username;
    private String tokenValue;
    private Date date;

    // getters/setters
}
</code></pre>

<p>```</p>

<h2>Converting Between <code>PersistentRememberMeToken</code> And <code>RememberMeToken</code></h2>

<p>Since different objects are used during runtime and persistence, I use Spring&rsquo;s generic conversion service to help with type conversion.</p>

<p>``` java
public class RememberMeConverter implements GenericConverter {</p>

<pre><code>@Override
public Set&lt;ConvertiblePair&gt; getConvertibleTypes() {
    return of(
            new ConvertiblePair(RememberMeToken.class, PersistentRememberMeToken.class),
            new ConvertiblePair(PersistentRememberMeToken.class, RememberMeToken.class)
    );
}

@Override
public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {
    if (sourceType.getType().equals(RememberMeToken.class)) {
        // RememberMeToken to PersistentRememberMeToken

        RememberMeToken from = (RememberMeToken) source;
        return new PersistentRememberMeToken(from.getUsername(), from.getSeries(), from.getTokenValue(), from.getDate());

    } else {
        // PersistentRememberMeToken to RememberMeToken

        PersistentRememberMeToken from = (PersistentRememberMeToken) source;
        return new RememberMeToken(from.getUsername(), from.getSeries(), from.getTokenValue(), from.getDate());
    }
}
</code></pre>

<p>}
```</p>

<h2>Create <code>ObjectifyPersistentTokenRepository</code> as a <code>PersistentTokenRepository</code></h2>

<p>This <code>PersistentTokenRepository</code> implementation uses a conversion service that has a <code>RememberMeConverter</code> registered and Objectify for persistence.</p>

<p>``` java
public class ObjectifyPersistentTokenRepository implements PersistentTokenRepository {</p>

<pre><code>private ConversionService conversionService;

public ObjectifyPersistentTokenRepository(ConversionService conversionService) {
    this.conversionService = conversionService;
}

@Override
public void createNewToken(PersistentRememberMeToken token) {
    RememberMeToken current = ofy().load().type(RememberMeToken.class).id(token.getSeries()).now();
    if (current != null) {
        throw new DataIntegrityViolationException("Series Id '" + token.getSeries() + "' already exists!");
    }

    RememberMeToken ofyToken = conversionService.convert(token, RememberMeToken.class);
    ofy().save().entity(ofyToken);
}

@Override
public void updateToken(String series, String tokenValue, Date lastUsed) {
    PersistentRememberMeToken token = getTokenForSeries(series);
    RememberMeToken ofyToken = new RememberMeToken(token.getUsername(), series, tokenValue, new Date());
    ofy().save().entity(ofyToken);
}

@Override
public PersistentRememberMeToken getTokenForSeries(String seriesId) {
    RememberMeToken rememberMeToken = ofy().load().type(RememberMeToken.class).id(seriesId).now();
    if (rememberMeToken != null) {
        return conversionService.convert(rememberMeToken, PersistentRememberMeToken.class);
    } else {
        return null;
    }
}

@Override
public void removeUserTokens(String username) {
    ofy().delete().keys(
            ofy().load().type(RememberMeToken.class).filter("username", username).keys().list()
    );
}
</code></pre>

<p>}
```</p>

<h2>Spring Security Configuration</h2>

<p>The final bit is to hook things up when configuring Spring Security. This can be done in the <code>configure(HttpSecurity http)</code> method if you are using Java configuration.</p>

<p>``` java
@Configuration
@EnableWebMvcSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {</p>

<pre><code>@Autowired
private ConversionService conversionService;

@Override
protected void configure(HttpSecurity http) throws Exception {
    http
        // common configuration
        .authorizeRequests()
        .antMatchers("/").permitAll()
        .anyRequest().authenticated()
        .and().formLogin().loginPage("/login").permitAll()
        .and().logout().logoutRequestMatcher(new AntPathRequestMatcher("/logout")).logoutSuccessUrl("/").permitAll()

        // use the custom persistent token repository
        .and().rememberMe().tokenRepository(new ObjectifyPersistentTokenRepository(conversionService));

}
</code></pre>

<p>}</p>

<p>```</p>

<h2>JSP Login Page</h2>

<p>Just in case you are wondering how the HTML form fields look:</p>

<p>``` html</p>

<pre><code>&lt;form action="${loginUrl}" method="POST"&gt;
    &lt;c:if test="${param.error != null}"&gt;
        &lt;p&gt;
            Invalid username and password.
        &lt;/p&gt;
    &lt;/c:if&gt;
    &lt;c:if test="${param.logout != null}"&gt;
        &lt;p&gt;
            You have been logged out.
        &lt;/p&gt;
    &lt;/c:if&gt;
    &lt;p&gt;
        &lt;label for="username"&gt;Username&lt;/label&gt;
        &lt;input type="text" id="username" name="username"/&gt;
    &lt;/p&gt;

    &lt;p&gt;
        &lt;label for="password"&gt;Password&lt;/label&gt;
        &lt;input type="password" id="password" name="password"/&gt;
    &lt;/p&gt;
    &lt;p&gt;
        &lt;input type="checkbox" name="remember-me" value="true"&gt; Remember Me
    &lt;/p&gt;
    &lt;input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}"/&gt;
    &lt;button type="submit" class="btn"&gt;Log in&lt;/button&gt;
&lt;/form&gt;
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optional Dependency for Method Parameter With Spring @Configuration]]></title>
    <link href="http://kctang.github.io/blog/2014/04/26/optional-dependency-for-method-parameter-with-spring-at-configuration/"/>
    <updated>2014-04-26T07:04:09+08:00</updated>
    <id>http://kctang.github.io/blog/2014/04/26/optional-dependency-for-method-parameter-with-spring-at-configuration</id>
    <content type="html"><![CDATA[<p>I started with a Spring Java configuration that looks like this:</p>

<p>``` java</p>

<pre><code>@Configuration
public class MyConfig {
    MyService myService(Collection&lt;RelatedService&gt; relatedServices) {
        return new MyService(relatedServices);
    }
}
</code></pre>

<p>```</p>

<p>Basically <code>Collection&lt;RelatedService&gt;</code> is telling Spring to look for all beans matching the type of <code>RelatedService</code> and put them in a <code>Collection</code> for me to use in <code>myService()</code>.</p>

<p>Then I wanted to make <code>relatedServices</code> an optional dependency. Ideally, I would like to be able to do something like this:</p>

<p>``` java</p>

<pre><code>@Configuration
public class MyConfig {
    // invalid use of @Autowired
    MyService myService(@Autowired(required=false) Collection&lt;RelatedService&gt; relatedServices) {
        return new MyService(relatedServices);
    }
}
</code></pre>

<p>```</p>

<p>However, <code>@Autowired</code> cannot annotate a parameter. This is what I end up doing.</p>

<p>``` java</p>

<pre><code>@Configuration
public class MyConfig {
    @Autowired(required=false)
    Collection&lt;RelatedService&gt; relatedServices

    MyService myService() {
        return new MyService(relatedServices);
    }
}
</code></pre>

<p>```</p>

<p>I would prefer to limit the visibility/scope of <code>relatedServices</code> within the method but it does not look possible.</p>
]]></content>
  </entry>
  
</feed>
